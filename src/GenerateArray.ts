import Validation from "./Validation.ts";

class GenerateArray {
    /**
     * Generate an array of the specified length filled with undefined values
     * @param length Size of array
     */
    public static blank(length: number) {

        Validation.integer(length, 1, "length");

        return Array(length);
    }

    /**
     * Generate an array of the specified length filled with the specified value
     * @param length Size of array
     * @param value Value to fill array with
     */
    public static uniform(length: number, value: any) {

        Validation.integer(length, 1, "length");

        return Array(length).fill(value);
    }

    /**
     * Generate an array of the specified length filled with values generated by the given function
     *
     * Examples:
     * GenerateArray.custom(() => Math.random(), 5) -> [0.12345, 0.6789, 0.101112, 0.131415, 0.161718] (possible values)
     * GenerateArray.custom(() => Math.floor(Math.random() * 10), 6) -> [7, 2, 5, 9, 1, 3] (possible values)
     *
     * @param generator Function to generate each array value
     * @param length Size of array
     */
    public static custom = (generator: () => any, length: number): any[] => {

        Validation.function(generator, "generator");
        Validation.integer(length, 1, "length");

        return Array.from({ length }, generator);
    }
}

export default GenerateArray;
